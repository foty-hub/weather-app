{"version":3,"sources":["components/DailyRow.js","components/CurrentDisplay.js","london-gradient.png","App.js","reportWebVitals.js","index.js"],"names":["iconPairsDaily","DailyRow","props","className","dangerouslySetInnerHTML","time","__html","icon","desc","max","min","iconPairsCurrent","CurrentDisplay","isNaN","temp","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","location","onSubmit","type","autoComplete","placeholder","onChange","App","locationSearch","localStorage","getItem","useState","currentInfo","setCurrent","currentDesc","setDesc","dailyTime","setDailyTime","dailyDesc","setDailyDesc","dailyMax","setDailyMax","dailyMin","setDailyMin","inputValue","setInputValue","searchValue","setSearchValue","locationDisplay","setLocationDisplay","currentIcon","setCurrentIcon","dailyIcons","setDailyIcons","useEffect","makeRequests","dateString","dt","dateTime","Date","dayIndex","getDay","dateVal","nth","getDate","month","getMonth","fetchWeather","lat","lng","a","weatherReq","fetch","weatherResponse","json","data","current","weather","description","substring","daily","map","x","Math","round","console","log","getPicture","placeID","detailsReq","mode","then","locationString","locReq","locResponse","locData","status","results","geometry","formatted_address","setItem","place_id","alert","src","image","alt","event","preventDefault","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.340933bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet iconPairsDaily = {\r\n  \"01\": \"fa-sun\",                      // clear sky\r\n  \"02\": \"fa-cloud-sun\",                // few clouds\r\n  \"03\": \"fa-cloud\",                    // scattered clouds\r\n  \"04\": \"fa-cloud\",                    // broken clouds\r\n  \"09\": \"fa-cloud-sun-rain\",           // shower rain\r\n  \"10\": \"fa-cloud-showers-heavy\",      // rain\r\n  \"11\": \"fa-bolt\",                     // thunderstorm\r\n  \"13\": \"fa-snowflake\",                // snow\r\n  \"50\": \"fa-smog\",                     // mist\r\n};\r\n\r\nfunction createHTML(time){\r\n  return {__html: '<p>' + time + '</p>'};\r\n}\r\n\r\nconst DailyRow = (props) => (\r\n  <div className=\"forecast-row\">\r\n    <div className=\"date\" dangerouslySetInnerHTML = {createHTML(props.time)}></div>\r\n    <i className={\"fas \" + iconPairsDaily[props.icon]}></i>\r\n    <p className=\"desc\">{props.desc}</p>\r\n    <p className=\"morn-temp\">{props.max}&#176;C</p>\r\n    <p className=\"even-temp\">{props.min}&#176;C</p>\r\n  </div>\r\n);\r\n\r\nexport default DailyRow","import React from 'react';\r\n\r\nlet iconPairsCurrent = {\r\n    \"01\": \"fa-sun\",                      // clear sky\r\n    \"02\": \"fa-cloud-sun\",                // few clouds\r\n    \"03\": \"fa-cloud\",                    // scattered clouds\r\n    \"04\": \"fa-cloud\",                    // broken clouds\r\n    \"09\": \"fa-cloud-sun-rain\",           // shower rain\r\n    \"10\": \"fa-cloud-showers-heavy\",      // rain\r\n    \"11\": \"fa-bolt\",                     // thunderstorm\r\n    \"13\": \"fa-snowflake\",                // snow\r\n    \"50\": \"fa-smog\",                     // mist\r\n  };\r\n\r\nconst CurrentDisplay = (props) => (\r\n    <div className=\"current-display\">\r\n        <h1 className=\"temp-today\">{!isNaN(props.temp) ? props.temp : \"loading...\"}&#176;C</h1>\r\n        <i className={\"fas \" + iconPairsCurrent[props.icon]}></i>\r\n        <p className=\"desc-today\">{props.desc}</p>\r\n        <div className=\"location\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"black\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M19.4751 9.98256C19.4751 14.1151 12.4585 21.67 11.9926 21.9632C11.5267 22.2564 4.51001 14.1151 4.51001 9.98256C4.51001 5.85006 7.86007 2.5 11.9926 2.5C16.1251 2.5 19.4751 5.85006 19.4751 9.98256ZM14.4868 9.98256C14.4868 11.3601 13.3701 12.4767 11.9926 12.4767C10.6151 12.4767 9.49838 11.3601 9.49838 9.98256C9.49838 8.60506 10.6151 7.48837 11.9926 7.48837C13.3701 7.48837 14.4868 8.60506 14.4868 9.98256Z\" fill=\"#5d1168\"/></svg>\r\n            <p className=\"city\">{props.location}</p>\r\n        </div>\r\n        <form onSubmit = {props.onSubmit}>\r\n            <input type=\"text\" autoComplete=\"off\" className=\"search-bar\" placeholder=\"eg... London, UK\" onChange = {props.onChange}/>\r\n        </form>\r\n    </div>\r\n);\r\n\r\nexport default CurrentDisplay","export default __webpack_public_path__ + \"static/media/london-gradient.76174e0b.png\";","import React, {useEffect, useState} from \"react\";\r\nimport './App.css';\r\nimport DailyRow from \"./components/DailyRow\";\r\nimport CurrentDisplay from './components/CurrentDisplay';\r\nimport image from './london-gradient.png';\r\n\r\nconst App = () => {\r\n\r\n  let locationSearch = \"\";\r\n\r\n  if (localStorage.getItem(\"Location\")){\r\n    locationSearch = localStorage.getItem(\"Location\");\r\n   }\r\n   else {\r\n     locationSearch = \"london, uk\"; // default fallback value if nothing is locally stored\r\n   }\r\n\r\n  const [currentInfo, setCurrent] = useState([]);\r\n  const [currentDesc, setDesc] = useState([]);\r\n  const [dailyTime, setDailyTime] = useState([]);\r\n  const [dailyDesc, setDailyDesc] = useState([]); \r\n  const [dailyMax, setDailyMax] = useState([]);\r\n  const [dailyMin, setDailyMin] = useState([]);\r\n  const [inputValue, setInputValue] = useState();\r\n  const [searchValue, setSearchValue] = useState(locationSearch);\r\n  const [locationDisplay, setLocationDisplay] = useState();\r\n  const [currentIcon, setCurrentIcon] = useState();\r\n  const [dailyIcons, setDailyIcons] = useState([]);\r\n  const [placeID, setPlaceID] = useState(\"\");\r\n\r\n  // Triggered on page load, retriggers when the search is submitted\r\n  useEffect(() => {\r\n    makeRequests(searchValue);\r\n  }, [searchValue]);\r\n\r\n  // Handles text submission and triggers useEffect, making the API calls\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setSearchValue(inputValue);\r\n  };\r\n\r\n  // Handles text input to the main search bar\r\n  const handleChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  // Returns the correct suffix for ordinal numbers (7th, 1st, 3rd)\r\n  const nth = (d) => {\r\n    if (d > 3 && d < 21){return d+'<sup>th</sup>'};\r\n    switch (d % 10){\r\n      case 1: return d+'<sup>st</sup>';\r\n      case 2: return d+'<sup>nd</sup>';\r\n      case 3: return d+'<sup>rd</sup>';\r\n      default: return d+'<sup>th</sup>';\r\n    };\r\n  };\r\n\r\n  // Converts javascript date strings to a more readable format\r\n  const dateString = (dt) => {\r\n    const dayArray = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\r\n    const monthArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n    // x1000 to convert form unix time to milliseconds\r\n    const dateTime = new Date(dt*1000);\r\n    const dayIndex = dateTime.getDay();\r\n    const dateVal = nth(dateTime.getDate());\r\n    const month = dateTime.getMonth();\r\n    return `${dayArray[dayIndex]} ${dateVal} ${monthArray[month]}`;\r\n  }\r\n\r\n  // Fetches and handles openweathermap API call, updating hooks\r\n  const fetchWeather = async (lat, lng) => {\r\n    const weatherReq = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&units=metric&appid=a7ff38ee1c49b77064c72f94875dcc9e`;\r\n    const weatherResponse = await fetch(weatherReq);\r\n    const data = await weatherResponse.json();\r\n\r\n    setCurrent(data.current);\r\n    setDesc(data.current.weather[0].description);\r\n    setCurrentIcon(data.current.weather[0].icon.substring(0, 2));\r\n    setDailyIcons( data.daily.map(x => x.weather[0].icon.substring(0, 2)) );  // take substring to eliminate the day/night alt icons eg. 05n, 05d\r\n    setDailyTime( data.daily.map(x => dateString(x.dt)) );                    // messy fix to prevent React throwing object assignment errors\r\n    setDailyDesc( data.daily.map(x => x.weather[0].description) );\r\n    setDailyMax( data.daily.map(x => Math.round(x.temp.max)) );\r\n    setDailyMin( data.daily.map(x => Math.round(x.temp.min)) );\r\n    console.log(data);\r\n  };\r\n\r\n  const getPicture = async (placeID) => {\r\n    const detailsReq = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeID}&key=AIzaSyCMCT2J6HObmXkBZiD-gMAdmucOoTXEn_U`;\r\n    const detailsResponse = await fetch(detailsReq, {mode: 'no-cors'}).then(data => console.log(data));\r\n    //const detailsData = await detailsResponse.json();\r\n    //console.log(detailsData);\r\n  };\r\n\r\n  // Fetches and handles the GMaps API call, and calls fetchWeather upon successful return\r\n  const makeRequests = async (locationString) => {\r\n    const locReq = `https://maps.googleapis.com/maps/api/geocode/json?address=${locationString}&key=AIzaSyCMCT2J6HObmXkBZiD-gMAdmucOoTXEn_U`;\r\n    const locResponse = await fetch(locReq);\r\n    const locData = await locResponse.json();\r\n    console.log(locData);\r\n    \r\n    let lat = \"\";\r\n    let lng = \"\";\r\n\r\n    switch(locData.status){\r\n\r\n      // Handles callback status\r\n      case \"OK\":\r\n        lat = locData.results[0].geometry.location.lat;\r\n        lng = locData.results[0].geometry.location.lng;\r\n        setLocationDisplay(locData.results[0].formatted_address);\r\n        localStorage.setItem(\"Location\", searchValue);\r\n        fetchWeather(lat, lng);\r\n        getPicture(locData.results[0].place_id);\r\n        break;\r\n      case \"ZERO_RESULTS\":\r\n        alert(\"No matching address found\");\r\n        break;\r\n      case \"INVALID_REQUEST\":\r\n        alert(\"Invalid request\");\r\n        break;\r\n      case \"OVER_DAILY_LIMIT\":\r\n      case \"OVER_QUERY_LIMIT\":\r\n      case \"REQUEST_DENIED\":\r\n      case \"INVALID_REQUEST\":\r\n        alert(\"API request failed\");\r\n        break;\r\n      default:\r\n        alert(\"Unknown error occurred\");\r\n    }\r\n  };\r\n\r\n  return(\r\n  <div className=\"container\">\r\n    <div className=\"londonimage\" > \r\n      <img src={image} alt=\"london-image\"/>\r\n    </div>\r\n    <div className=\"todaysforecast\">\r\n      <CurrentDisplay temp = {Math.round(currentInfo.temp)} desc = {currentDesc} location={locationDisplay} \r\n                                onSubmit={handleSubmit} onChange={handleChange} icon={currentIcon}/> \r\n      <p className=\"subtitle\">next 7 days</p>\r\n    </div>\r\n    <div className=\"forecast\">\r\n        <DailyRow time = {dailyTime[1]} desc = {dailyDesc[1]} max = {dailyMax[1]} min = {dailyMin[1]} icon = {dailyIcons[1]}/>\r\n        <DailyRow time = {dailyTime[2]} desc = {dailyDesc[2]} max = {dailyMax[2]} min = {dailyMin[2]} icon = {dailyIcons[2]}/>\r\n        <DailyRow time = {dailyTime[3]} desc = {dailyDesc[3]} max = {dailyMax[3]} min = {dailyMin[3]} icon = {dailyIcons[3]}/>\r\n        <DailyRow time = {dailyTime[4]} desc = {dailyDesc[4]} max = {dailyMax[4]} min = {dailyMin[4]} icon = {dailyIcons[4]}/>\r\n        <DailyRow time = {dailyTime[5]} desc = {dailyDesc[5]} max = {dailyMax[5]} min = {dailyMin[5]} icon = {dailyIcons[5]}/>\r\n        <DailyRow time = {dailyTime[6]} desc = {dailyDesc[6]} max = {dailyMax[6]} min = {dailyMin[6]} icon = {dailyIcons[6]}/>\r\n        <DailyRow time = {dailyTime[7]} desc = {dailyDesc[7]} max = {dailyMax[7]} min = {dailyMin[7]} icon = {dailyIcons[7]}/>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}