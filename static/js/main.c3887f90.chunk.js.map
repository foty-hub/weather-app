{"version":3,"sources":["logo.svg","components/DailyRow.js","components/CurrentDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["DailyRow","e","className","time","desc","max","min","CurrentDisplay","temp","src","alt","href","App","exampleReq","useState","currentInfo","setCurrent","currentDesc","setDesc","dailyTime","setDailyTime","dailyDesc","setDailyDesc","dailyMax","setDailyMax","dailyMin","setDailyMin","dateString","dt","dateTime","Date","dayIndex","getDay","dateVal","d","nth","getDate","month","getMonth","useEffect","fetchData","a","fetch","response","json","data","current","weather","description","daily","map","x","Math","round","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3887f90.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nconst DailyRow = (e) => (\r\n  <div className=\"forecast-row\">\r\n    <p className=\"date\">{e.time}</p>\r\n    <p className=\"desc\">{e.desc}</p>\r\n    <p className=\"morn-temp\">{e.max}&#8451;</p>\r\n    <p className=\"even-temp\">{e.min}&#8451;</p>\r\n  </div>\r\n);\r\n\r\nexport default DailyRow","import React from 'react';\r\n\r\nconst CurrentDisplay = (e) => (\r\n    <div className=\"current-display\">\r\n        <h1 className=\"temp-today\">{e.temp}&#8451;</h1>\r\n        <p className=\"desc-today\">{e.desc}</p>\r\n        <div className=\"location\">\r\n            <img src=\"./location-icon.svg\" alt=\"location-icon\"/>\r\n            <p className=\"city\">London, UK</p>\r\n            <a href=\"#\">Change Location</a>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default CurrentDisplay","import logo from './logo.svg';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport './App.css';\r\nimport DailyRow from \"./components/DailyRow\";\r\nimport CurrentDisplay from './components/CurrentDisplay';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const APP_KEY = 'a7ff38ee1c49b77064c72f94875dcc9e';\r\n  // positive coords are N/E, negative are S/W\r\n  const long = '51.5074';\r\n  const lat = '-0.1278';\r\n  const exampleReq = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=metric&appid=${APP_KEY}`;\r\n\r\n  const [currentInfo, setCurrent] = useState([]);\r\n  const [currentDesc, setDesc] = useState([]);\r\n  const [dailyTime, setDailyTime] = useState([]);\r\n  const [dailyDesc, setDailyDesc] = useState([]);\r\n  const [dailyMax, setDailyMax] = useState([]);\r\n  const [dailyMin, setDailyMin] = useState([]);\r\n\r\n  // triggered on page load, will be set up to refresh when new location is added\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  function nth(d) {\r\n    if (d > 3 && d < 21){return d+'th'};\r\n    switch (d % 10){\r\n      case 1: return d+'st';\r\n      case 2: return d+'nd';\r\n      case 3: return d+'rd';\r\n      default: return d+'th';\r\n    };\r\n  };\r\n\r\n  function dateString(dt){\r\n    // x1000 to convert form unix time to milliseconds\r\n    const dayArray = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\r\n    const monthArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\n    const dateTime = new Date(dt*1000);\r\n    const dayIndex = dateTime.getDay();\r\n    const dateVal = nth(dateTime.getDate());\r\n    const month = dateTime.getMonth();\r\n    return `${dayArray[dayIndex]} ${dateVal} ${monthArray[month]}`;\r\n  }\r\n\r\n  // fetches and logs the data, updates the current info\r\n  const fetchData = async () => {\r\n    const response = await fetch(exampleReq);\r\n    const data = await response.json();\r\n    setCurrent(data.current);\r\n    setDesc(data.current.weather[0].description);\r\n    setDailyTime( data.daily.map(x => dateString(x.dt)) );        // quick fix to prevent React throwing object assignment errors\r\n    setDailyDesc( data.daily.map(x => x.weather[0].description) );\r\n    setDailyMax( data.daily.map(x => Math.round(x.temp.max)) );\r\n    setDailyMin( data.daily.map(x => Math.round(x.temp.min)) );\r\n    console.log(data);\r\n  };\r\n\r\n  return(\r\n    <div className=\"container\">\r\n        <CurrentDisplay temp = {Math.round(currentInfo.temp)} desc = {currentDesc} />\r\n      <p className=\"subtitle\">next 7 days</p>\r\n      <div className=\"forecast\">\r\n        <DailyRow time = {dailyTime[1]} desc = {dailyDesc[1]} max = {dailyMax[1]} min = {dailyMin[1]}/>\r\n        <DailyRow time = {dailyTime[2]} desc = {dailyDesc[2]} max = {dailyMax[2]} min = {dailyMin[2]}/>\r\n        <DailyRow time = {dailyTime[3]} desc = {dailyDesc[3]} max = {dailyMax[3]} min = {dailyMin[3]}/>\r\n        <DailyRow time = {dailyTime[4]} desc = {dailyDesc[4]} max = {dailyMax[4]} min = {dailyMin[4]}/>\r\n        <DailyRow time = {dailyTime[5]} desc = {dailyDesc[5]} max = {dailyMax[5]} min = {dailyMin[5]}/>\r\n        <DailyRow time = {dailyTime[6]} desc = {dailyDesc[6]} max = {dailyMax[6]} min = {dailyMin[6]}/>\r\n        <DailyRow time = {dailyTime[7]} desc = {dailyDesc[7]} max = {dailyMax[7]} min = {dailyMin[7]}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}